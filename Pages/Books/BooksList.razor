@page "/books"
@using BooksStore.Models
@using BooksStore.Service
@inject BooksService BooksService
@inject BookCategoryService BookCategoryService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<a class="btn btn-info" href="createbook">新增</a>
@if (books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>书籍名称</th>
                    <th>书籍类型</th>
                    <th>作者</th>
                    <th>出版社</th>
                    <th>价格</th>
                    <th>是否可用</th>
                    <th>是否热门</th>
                    <th>出版时间</th>
                    <th>创建时间</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var book in books)
                {
                    <tr>
                        <td>@book.Name</td>
                        <td>@(bookCategories.ContainsKey(book.CategoryId)?bookCategories[book.CategoryId]?.Name:"")</td>
                        <td>@book.Author</td>
                        <td>@book.Press</td>
                        <td>@book.Price</td>
                        <td>
                            <InputCheckbox @bind-Value="book.Enabled" @onclick="(()=>OnChangeEnabled(book.Id))" />
                        </td>
                        <td><InputCheckbox @bind-Value="book.IsHot" @onclick="(()=>OnChangeIsHot(book.Id))" /></td>
                        <td>@book.Pubtime.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@book.CreateTime.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>
                            <a class="btn btn-link" href="editbook/@book.Id">编辑</a>
                            <button class="btn btn-link" href="#" @onclick="(()=>OnDelete(book.Id))">删除</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </EditForm>
}

@code {
    private List<Book> books;
    private EditContext editContext;
    private Dictionary<string,BookCategory> bookCategories;
    /// <summary>
    /// 初始化
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        //获取图书列表
        books = await BooksService.OnGetAsync();
        //图书类型集合
        bookCategories = new Dictionary<string, BookCategory>();

        foreach (var book in books)
        {
            if (!bookCategories.ContainsKey(book.CategoryId))
            {
                //根据图书类型id获取图书类型名称
                var bookCategory =await BookCategoryService.OnGetModelAsync(book.CategoryId);

                bookCategories.Add(book.CategoryId, bookCategory);
            }
        }

        if (books != null)
        {
            editContext = new EditContext(books);
        }

    }
    /// <summary>
    /// 修改是否可用
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    private async Task OnChangeEnabled(string id)
    {
        var flag = await JSRuntime.InvokeAsync<bool>(
                "exampleJsFunctions.showMessage",
                "确定执行操作?");
        if (flag)
        {
           var result= await BooksService.EditEnabled(id);

            if (result>0)
            {
                NavigationManager.NavigateTo("books");
            }
            else
            {
                await JSRuntime.InvokeAsync<bool>(
                "exampleJsFunctions.showMessage",
                "删除失败");
            }
        }
    }
    /// <summary>
    /// 修改是否热门
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    private async Task OnChangeIsHot(string id)
    {
        var flag = await JSRuntime.InvokeAsync<bool>(
                "exampleJsFunctions.showMessage",
                "确定执行操作?");
        if (flag)
        {
           var result= await BooksService.EditIsHot(id);

            if (result>0)
            {
                NavigationManager.NavigateTo("books");
            }
            else
            {
                await JSRuntime.InvokeAsync<bool>(
                "exampleJsFunctions.showMessage",
                "删除失败");
            }
        }
        ShouldRender();
    }
    protected override bool ShouldRender()
    {
        var renderUI = true;

        return renderUI;
    }
    /// <summary>
    /// 删除
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    private async Task OnDelete(string id)
    {
        var result = await JSRuntime.InvokeAsync<bool>(
                "exampleJsFunctions.showMessage",
                "确定删除操作?");
        if (result)
        {
            var del= await BooksService.Delete(id);

            if (del>0)
            {
                NavigationManager.NavigateTo("books");
            }
            else
            {
                await JSRuntime.InvokeAsync<bool>(
                "exampleJsFunctions.showMessage",
                "删除失败");
            }

        }
        ShouldRender();
    }
}

